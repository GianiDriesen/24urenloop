package be.industria.industria24u.industria24u.editors;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;
import java.sql.Date;
import be.industria.industria24u.industria24u.AdminTrainingsActivity;
import be.industria.industria24u.industria24u.R;
import be.industria.industria24u.industria24u.SingletonApplication;
import be.industria.industria24u.industria24u.navigation.AdminNavigationListener;
import entity.Training;

@SuppressWarnings({"deprecation", "UnusedParameters"})
public class AdminTrainingCreateActivity extends AppCompatActivity {
    private SingletonApplication app;
    private Toolbar toolbar;
    private DrawerLayout drawer;
    private ActionBarDrawerToggle toggle;
    private NavigationView navigationView;
    private EditText location;
    private EditText day;
    private EditText month;
    private EditText year;
    private EditText beginHours;
    private EditText beginMinutes;
    private EditText endHours;
    private EditText endMinutes;
    private Training training = new Training();
    private Intent intent;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.admin_training_create_container);
        app = (SingletonApplication) this.getApplication();
        setupViews();
        intent = new Intent(this, AdminTrainingsActivity.class);
    }

    private void setupViews() {
        toolbar = (Toolbar) findViewById(R.id.admin_training_create_toolbar);
        if (getSupportActionBar() == null) {
            setSupportActionBar(toolbar);
        }

        drawer = (DrawerLayout) findViewById(R.id.admin_training_create_container);
        toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        navigationView = (NavigationView) findViewById(R.id.admin_training_create_nav);
        navigationView.setNavigationItemSelectedListener(new AdminTrainingCreateActivity.NavListener(this.getApplicationContext()));

        location = (EditText) findViewById(R.id.location);
        day = (EditText) findViewById(R.id.day);
        month = (EditText) findViewById(R.id.month);
        year = (EditText) findViewById(R.id.year);
        //beginHours = (EditText) findViewById(R.id.beginHours);
        //beginMinutes = (EditText) findViewById(R.id.beginMinutes);
        //endHours = (EditText) findViewById(R.id.endHours);
        //endMinutes = (EditText) findViewById(R.id.endMinutes);
    }

    public void insertTraining(View v) {
        training.setMeetingPoint(location.getText().toString());
        //int beginHoursInt = Integer.parseInt(beginHours.getText().toString());
        //int beginMinutesInt = Integer.parseInt(beginMinutes.getText().toString());
        //int endHoursInt = Integer.parseInt(endHours.getText().toString());
        //int endMinutesInt = Integer.parseInt(endMinutes.getText().toString());
        Date beginDate = new Date(0);
        beginDate.setDate(Integer.parseInt(day.getText().toString()));
        beginDate.setMonth(Integer.parseInt(month.getText().toString())-1);
        beginDate.setYear(Integer.parseInt(year.getText().toString())-1900);
        Date endDate = new Date(0);
        endDate.setDate(Integer.parseInt(day.getText().toString()));
        endDate.setMonth(Integer.parseInt(month.getText().toString())-1);
        endDate.setYear(Integer.parseInt(year.getText().toString())-1900);
        training.setBeginDateTime(beginDate);
        training.setEndDateTime(endDate);
        app.getEntityMapper().dataSent();
        app.getEntityMapper().getTrainingMapper().createTraining(training);
        app.tmpTraining = training;
        new InsertTraining().execute();
    }

    private class InsertTraining extends AsyncTask<Void, Void, Training> {
        protected Training doInBackground(Void... voids) {
            Training training = new Training();
            while (!app.getEntityMapper().dataPushed()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataPushed()) {
                app.getEntityMapper().dataSent();
            }
            return training;
        }

        protected void onPostExecute(Training training) {
            app.getEntityMapper().getTrainingMapper().updateTrainingLocation(app.tmpTraining);
            startActivity(intent);
            finish();
            Toast.makeText(app.getApplicationContext(), "Created new Training", Toast.LENGTH_SHORT).show();
        }
    }

    private class NavListener extends AdminNavigationListener {
        public NavListener(Context context) { super(context); }
        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            super.onNavigationItemSelected(item);
            //finish();
            startActivity(super.resultIntent);
            drawer.closeDrawer(GravityCompat.START);
            return true;
        }
    }
}
