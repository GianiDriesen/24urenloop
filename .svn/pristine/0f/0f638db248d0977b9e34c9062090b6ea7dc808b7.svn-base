package be.industria.industria24u.industria24u;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import java.sql.Date;

import entity.Person;

import be.industria.industria24u.industria24u.navigation.RunnerNavigationListener;

@SuppressWarnings({"deprecation", "UnusedParameters"})
public class RunnerMyProfileEditActivity extends AppCompatActivity {
    private SingletonApplication app;
    private DrawerLayout drawer;
    private TextView firstName;
    private TextView lastName;
    private TextView phoneNumber;
    private TextView eMail;
    private TextView birthDay;
    private TextView birthMonth;
    private TextView birthYear;
    private CheckBox isPushNotifications;
    private CheckBox isEMailNotifications;
    private Person person = new Person();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.runner_my_profile_edit_container);
        app = (SingletonApplication) this.getApplication();
        app.getEntityMapper().getpMapper().getPerson(app.getUser().getId());
        new GetRunner().execute();
        setupViews();
        setupContent();
    }

    private void setupViews() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.runner_my_profile_toolbar);
        if (getSupportActionBar() == null) {
            setSupportActionBar(toolbar);
        }

        drawer = (DrawerLayout) findViewById(R.id.runner_my_profile_container);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.runner_my_profile_nav);
        navigationView.setNavigationItemSelectedListener(new NavListener(this.getApplicationContext()));
    }

    private void setupContent() {
        firstName = (EditText) findViewById(R.id.myFirstName);
        lastName  = (EditText) findViewById(R.id.myLastName);
        phoneNumber = (EditText) findViewById(R.id.myPhoneNumber);
        eMail = (EditText) findViewById(R.id.myEMail);
        birthDay = (EditText) findViewById(R.id.myBirthDay);
        birthMonth = (EditText) findViewById(R.id.myBirthMonth);
        birthYear = (EditText) findViewById(R.id.myBirthYear);
        isPushNotifications = (CheckBox) findViewById(R.id.isPNotifications);
        isEMailNotifications = (CheckBox) findViewById(R.id.isENotifications);
    }

    private void setupHint(Person person) {

        firstName.setText(String.valueOf(person.getFirstName()));
        lastName.setText(String.valueOf(person.getLastName()));
        eMail.setText(String.valueOf(person.geteMail()));
        phoneNumber.setText(String.valueOf(person.getPhoneNumber()));
        birthDay.setText(String.valueOf(person.getBirthDate().getDate()));
        int month = person.getBirthDate().getMonth()+1;
        birthMonth.setText(String.valueOf(month));
        int year = person.getBirthDate().getYear()+1900;
        birthYear.setText(String.valueOf(year));
        boolean boolE = false;
        boolean boolN = false;
        if (person.getEmailSetting() == 1){ boolE = true;}
        if (person.getNotificationSetting() == 1){ boolN = true;}
        isEMailNotifications.setChecked(boolE);
        isPushNotifications.setChecked(boolN);
    }

    public void updateMyProfile(View view) {
        person.setFirstName(firstName.getText().toString());
        person.setLastName(lastName.getText().toString());
        person.seteMail(eMail.getText().toString());
        person.setPhoneNumber(phoneNumber.getText().toString());
        Date birthdate = person.getBirthDate();
        birthdate.setDate(Integer.parseInt(birthDay.getText().toString()));
        birthdate.setMonth(Integer.parseInt(birthMonth.getText().toString())-1);
        birthdate.setYear((Integer.parseInt(birthYear.getText().toString())-1900));
        person.setBirthDate(birthdate);
        int boolE = 0;
        int boolN = 0;
        if (isEMailNotifications.isChecked()) {boolE = 1;}
        if (isPushNotifications.isChecked()) {boolN = 1;}
        person.setNotificationSetting(boolN);
        person.setEmailSetting(boolE);
        CommitAndGoOn();
    }

    private void CommitAndGoOn() {
        app.getEntityMapper().getpMapper().updatePerson(person);
        app.getEntityMapper().getpMapper().updatePersonPhone(person);
        app.setUser(person);
        Intent intent = new Intent(RunnerMyProfileEditActivity.this, RunnerMyProfileStaticActivity.class);
        startActivity(intent);
        Toast.makeText(app.getApplicationContext(), "Update is done!", Toast.LENGTH_LONG).show();
    }

    private class GetRunner extends AsyncTask<Void, Void, Person> {
        protected Person doInBackground(Void... voids) {
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                person = app.entityMapper.person;
                app.getEntityMapper().dataGrabbed();
            }
            return person;
        }

        protected void onPostExecute(Person person) {setupHint(person);}

    }

    private class NavListener extends RunnerNavigationListener {
        public NavListener(Context context) {
            super(context);
        }

        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            super.onNavigationItemSelected(item);
            //finish();
            startActivity(super.resultIntent);
            drawer.closeDrawer(GravityCompat.START);
            return true;
        }
    }
}
