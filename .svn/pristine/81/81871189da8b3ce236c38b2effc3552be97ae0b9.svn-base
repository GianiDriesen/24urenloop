package be.industria.industria24u.industria24u;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.SystemClock;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.Chronometer;
import android.widget.ExpandableListView;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import be.industria.industria24u.industria24u.editors.AdminLapEditActivity;
import be.industria.industria24u.industria24u.navigation.AdminNavigationListener;
import entity.Lap;
import entity.Person;

@SuppressWarnings("UnusedParameters")
public class AdminChronometerActivity extends AppCompatActivity {
    private SingletonApplication app;
    private Toolbar toolbar;
    private ActionBarDrawerToggle toggle;
    private DrawerLayout drawer;
    private NavigationView navigationView;
    private Chronometer chronometer;
    private Button next_runner;
    private Button see_all_laps;
    private Button edit_previous_lap;
    private Button start_button;
    private Button end_button;
    private ExpandableAdapter adapter;
    private ExpandableListView listView;
    private List<Object> parents;
    private HashMap<Object, List<String>> relations;
    private HashMap<Person, Integer> queue;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.admin_chronometer_container);
        app = (SingletonApplication) this.getApplication();
        parents = new ArrayList<>();
        relations = new HashMap<>();
        setupViews();
        setupBtnsAndChrono();
        queue = new HashMap<>();
        app.getEntityMapper().getpMapper().getRunnerQueue();
        new GetRunnerQueue().execute();
        if (app.isChronoStarted) {
            setChronoToValue();
        }
    }

    private void setupBtnsAndChrono() {
        next_runner = (Button) findViewById(R.id.nextRunnerBtn);
        see_all_laps = (Button) findViewById(R.id.lapHistoryBtn);
        edit_previous_lap = (Button) findViewById(R.id.editLapBtn);
        start_button = (Button) findViewById(R.id.startBtn);
        end_button = (Button) findViewById(R.id.endBtn);
        chronometer = (Chronometer) findViewById(R.id.chronometer1);
        makeButtonsVisible();
    }

    private void makeButtonsVisible() {
        if (!app.isChronoStarted) {
            start_button.setVisibility(View.VISIBLE);
            end_button.setVisibility(View.GONE);
        }
        else {
            start_button.setVisibility(View.GONE);
            end_button.setVisibility(View.VISIBLE);
        }
    }

    private void setupViews() {
        toolbar = (Toolbar) findViewById(R.id.admin_chronometer_toolbar);
        if (getSupportActionBar() == null) {
            setSupportActionBar(toolbar);
        }

        drawer = (DrawerLayout) findViewById(R.id.admin_chronometer_container);
        toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        navigationView = (NavigationView) findViewById(R.id.admin_chronometer_nav);
        navigationView.setNavigationItemSelectedListener(new NavListener(this.getApplicationContext()));

        listView = (ExpandableListView) findViewById(R.id.runnerqueue_chrono);
        listView.setGroupIndicator(null);
    }

    private void displayQueue(List<Person> runners) {
        if (!runners.isEmpty()) {
            for (Person p:runners) {
                List<String> fields = p.getExportableFieldsForQueue();
                parents.add(p);
                relations.put(p, fields);
            }
            adapter = new ExpandableAdapter(relations, parents);
            adapter.setInflater((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE), this);
            listView.setAdapter(adapter);
        } else {
            Toast.makeText(app.getApplicationContext(), "There are no persons in the runnerqueue", Toast.LENGTH_LONG).show();
        }
    }

    private class GetRunnerQueue extends AsyncTask<Void, Void, List<Person>> {
        protected List<Person> doInBackground(Void... voids) {
            List<Person> runners = new LinkedList<>();
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                runners = app.getEntityMapper().persons;
                queue = app.getEntityMapper().runnerQueue;
                app.getEntityMapper().dataGrabbed();
            }
            return runners;
        }

        protected void onPostExecute(List<Person> runners) {
            displayQueue(runners);
        }
    }

    private void setChronoToValue() {
        chronometer.setBase(app.lapBeginTime);
        chronometer.start();
    }

    public void nextRunner(View v) {
        // If there is another person in the queue and the Chronometer has started:
        if (!queue.isEmpty() && app.isChronoStarted) {
            Person tmpPerson = (Person) parents.get(0);
            // 1. Set EndDateTime & PersonID to tmpLap and insert it as a new Lap in DB
            app.tmpLap.setEndDateTime(app.getTimestamp());
            app.tmpLap.setPersonId(tmpPerson.getId());
            app.getEntityMapper().getlMapper().insertLap(app.tmpLap);

            // 2. Delete row from Runner queue in DB & from this view
            app.getEntityMapper().getpMapper().deleteRunner(queue.get(tmpPerson));
            relations.remove(tmpPerson);
            parents.remove(tmpPerson);
            adapter.notifyDataSetChanged();

            // 3. Start next round (possible because RunnerQueue isn't empty)
            startClock(v);
        } else if (!app.isChronoStarted){
            Toast.makeText(app.getApplicationContext(), "Start run first!", Toast.LENGTH_LONG).show();
        } else {
            Toast.makeText(app.getApplicationContext(), "There are no persons left in the runnerqueue!", Toast.LENGTH_LONG).show();
        }
    }

    public void startClock(View v) {
        chronometer.setBase(SystemClock.elapsedRealtime());
        app.lapBeginTime = SystemClock.elapsedRealtime();
        app.isChronoStarted = true;
        makeButtonsVisible();
        if (queue.isEmpty()) {
            Toast.makeText(app.getApplicationContext(), "There are no persons left in the runnerqueue!", Toast.LENGTH_LONG).show();
            chronometer.stop();
        } else {
            app.tmpLap.setBeginDateTime(app.getTimestamp());
            chronometer.start();
        }
    }

    public void endClock(View v) {
        app.isChronoStarted = false;
        makeButtonsVisible();
        if (!queue.isEmpty()) {
            Person tmpPerson = (Person) parents.get(0);
            // 1. Set EndDateTime & PersonID to tmpLap and insert it as a new Lap in DB
            app.tmpLap.setEndDateTime(app.getTimestamp());
            app.tmpLap.setPersonId(tmpPerson.getId());
            app.getEntityMapper().getlMapper().insertLap(app.tmpLap);

            // 2. Delete row from Runner queue in DB & from this view
            app.getEntityMapper().getpMapper().deleteRunner(queue.get(tmpPerson));
            relations.remove(tmpPerson);
            parents.remove(tmpPerson);
            adapter.notifyDataSetChanged();

            // 3. Stop chronometer
            chronometer.setBase(SystemClock.elapsedRealtime());
            chronometer.stop();
        }
    }

    public void editLap(View v) {
        Snackbar editIntentSnack = Snackbar.make(findViewById(R.id.admin_chronometer_coordinator), "Are you sure you want to leave?", Snackbar.LENGTH_LONG);
        editIntentSnack.setAction(R.string.confirm, new EditIntentListener());
        editIntentSnack.show();
    }

    public void seeAllLAps(View v) {
        Snackbar listIntentSnack = Snackbar.make(findViewById(R.id.admin_chronometer_coordinator), "Are you sure you want to leave?", Snackbar.LENGTH_LONG);
        listIntentSnack.setAction(R.string.confirm, new ListIntentListener());
        listIntentSnack.show();
    }

    private class EditIntentListener implements View.OnClickListener {
        @Override
        public void onClick(View v) {
            app.getEntityMapper().getlMapper().getLapNewest();
            new GetLastLap().execute();
        }
    }

    private class ListIntentListener implements View.OnClickListener {
        @Override
        public void onClick(View v) {
            Intent listIntent = new Intent(AdminChronometerActivity.this, AdminLapHistoryActivity.class);
            startActivity(listIntent);
        }
    }

    private class GetLastLap extends AsyncTask<Void, Void, Lap> {
        protected Lap doInBackground(Void... voids) {
            Lap lap = new Lap();
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                lap = app.getEntityMapper().lap;
                app.getEntityMapper().dataGrabbed();
            }
            return lap;
        }

        protected void onPostExecute(Lap lap) {
            app.tmpLap = lap;
            Intent editIntent = new Intent(AdminChronometerActivity.this, AdminLapEditActivity.class);
            startActivity(editIntent);
        }
    }

    private class NavListener extends AdminNavigationListener {
        public NavListener(Context context) {
            super(context);
        }

        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            super.onNavigationItemSelected(item);
            //finish();
            startActivity(super.resultIntent);
            drawer.closeDrawer(GravityCompat.START);
            return true;
        }
    }
}
