package be.industria.industria24u.industria24u;

import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.AsyncTask;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.TextView;
import entity.Person;

import be.industria.industria24u.industria24u.navigation.RunnerNavigationListener;

@SuppressWarnings("UnusedParameters")
public class RunnerMyProfileStaticActivity extends AppCompatActivity {
    private SingletonApplication app;
    private DrawerLayout drawer;
    private TextView firstName;
    private TextView lastName;
    private TextView phoneNumber;
    private TextView eMail;
    private TextView birthDay;
    private TextView birthMonth;
    private TextView birthYear;
    private CheckBox isPushNotifications;
    private CheckBox isEMailNotifications;
    private Person person = new Person();

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.runner_my_profile_static_container);
        app = (SingletonApplication) this.getApplication();
        app.getEntityMapper().getpMapper().getPerson(app.getUser().getId());
        new GetRunner().execute();

        setupViews();
        setupContent();
    }

    private void setupViews() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.runner_my_profile_static_toolbar);
        if (getSupportActionBar() == null) {
            setSupportActionBar(toolbar);
        }

        drawer = (DrawerLayout) findViewById(R.id.runner_my_profile_static_container);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.runner_my_profile_nav);
        navigationView.setNavigationItemSelectedListener(new NavListener(this.getApplicationContext()));
    }

    private void setupContent() {
        firstName = (TextView) findViewById(R.id.myFirstName);
        lastName  = (TextView) findViewById(R.id.myLastName);
        phoneNumber = (TextView) findViewById(R.id.myPhoneNumber);
        eMail = (TextView) findViewById(R.id.myEMail);
        birthDay = (TextView) findViewById(R.id.myBirthDay);
        birthMonth = (TextView) findViewById(R.id.myBirthMonth);
        birthYear = (TextView) findViewById(R.id.myBirthYear);
        isPushNotifications = (CheckBox) findViewById(R.id.isPNotifications);
        isEMailNotifications = (CheckBox) findViewById(R.id.isENotifications);
    }

    public void editMyProfile(View view) {
        Intent intent = new Intent(RunnerMyProfileStaticActivity.this, RunnerMyProfileEditActivity.class);
        startActivity(intent);
        finish();
    }

    private class NavListener extends RunnerNavigationListener {
        public NavListener(Context context) {
            super(context);
        }

        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            super.onNavigationItemSelected(item);
            //finish();
            startActivity(super.resultIntent);
            drawer.closeDrawer(GravityCompat.START);
            return true;
        }
    }

    @SuppressWarnings("deprecation")
    private class GetRunner extends AsyncTask<Void, Void, Person> {
        protected Person doInBackground(Void... voids) {
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                person = app.getEntityMapper().person;
                app.getEntityMapper().dataGrabbed();
            }
            return person;
        }

        protected void onPostExecute(Person person) {setContent(person);
        }

        public void setContent(Person person) {
            lastName.setText(person.getLastName());
            firstName.setText(person.getFirstName());
            eMail.setText(person.geteMail());
            phoneNumber.setText(person.getPhoneNumber());
            birthDay.setText(String.valueOf(person.getBirthDate().getDate()));
            int month = person.getBirthDate().getMonth()+1;
            birthMonth.setText(String.valueOf(month));
            int year = person.getBirthDate().getYear()+1900;
            birthYear.setText(String.valueOf(year));
            boolean boolE = false;
            boolean boolN = false;
            if (person.getEmailSetting() == 1){ boolE = true;}
            if (person.getNotificationSetting() == 1){ boolN = true;}
            isEMailNotifications.setChecked(boolE);
            isPushNotifications.setChecked(boolN);
        }
    }


}
