package be.industria.industria24u.industria24u;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.design.widget.Snackbar;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.ContextMenu;
import android.view.LayoutInflater;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnCreateContextMenuListener;
import android.widget.ExpandableListView;
import android.widget.ExpandableListView.OnChildClickListener;
import android.widget.ExpandableListView.ExpandableListContextMenuInfo;
import android.widget.Toast;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;

import be.industria.industria24u.industria24u.editors.AdminTeamCreateActivity;
import be.industria.industria24u.industria24u.editors.AdminTeamEditActivity;
import be.industria.industria24u.industria24u.navigation.AdminNavigationListener;
import entity.Person;
import entity.Team;

@SuppressWarnings("UnusedParameters")
public class AdminTeamsActivity extends AppCompatActivity implements OnChildClickListener, OnCreateContextMenuListener {
    private SingletonApplication app;
    private DrawerLayout drawer;
    private ExpandableAdapter adapter;
    private ExpandableListView listView;
    private List<Object> parents;
    private HashMap<Object, List<String>> relations;
    private List<List<String>> memberList = new LinkedList<>();
    private List<List<String>> idList = new LinkedList<>();
    private List<Team> teams = new LinkedList<>();
    private int number = 0;

    private Team team;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.admin_teams_container);
        app = (SingletonApplication) this.getApplication();
        setupViews();
        parents = new ArrayList<>();
        relations = new HashMap<>();
        app.getEntityMapper().gettMapper().getTeams(); // Get all teams
        new GetTeams().execute();

    }

    private void setupViews() {
        Toolbar toolbar = (Toolbar) findViewById(R.id.admin_teams_toolbar);
        if (getSupportActionBar() == null) {
            setSupportActionBar(toolbar);
        }

        drawer = (DrawerLayout) findViewById(R.id.admin_teams_container);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.admin_teams_nav);
        navigationView.setNavigationItemSelectedListener(new NavListener(this.getApplicationContext()));

        listView = (ExpandableListView) findViewById(R.id.admin_team_list);
        listView.setGroupIndicator(null);
        listView.setLongClickable(true);
        registerForContextMenu(listView);
    }

    private void displayData(List<Team> teams) {
        if (!teams.isEmpty()) {
            for (Team t : teams) {
                List<String> fields = new ArrayList<>();
                fields.addAll(t.getExportableFields());
                fields.addAll(memberList.get(teams.indexOf(t)));
                parents.add(t);
                relations.put(t, fields);
            }
            adapter = new ExpandableAdapter(relations, parents);
            adapter.setInflater((LayoutInflater) getSystemService(Context.LAYOUT_INFLATER_SERVICE), this);
            listView.setAdapter(adapter);
            listView.setOnChildClickListener(this);
        } else {
            Toast.makeText(app.getApplicationContext(), "There are no teams in the database", Toast.LENGTH_LONG).show();
        }
    }

    @Override
    public boolean onChildClick(ExpandableListView expandableListView, View view, int i, int i1, long l) {
        return false;
    }

    @Override
    public void onCreateContextMenu(ContextMenu menu, View v, ContextMenu.ContextMenuInfo menuInfo) {
        super.onCreateContextMenu(menu, v, menuInfo);
        MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.admin_edit_remove, menu);
    }

    @Override
    public boolean onContextItemSelected(MenuItem item) {
        ExpandableListContextMenuInfo info = (ExpandableListContextMenuInfo) item.getMenuInfo();
        team = (Team) adapter.getGroup((int) info.id);
        switch (item.getItemId()) {
            case R.id.action_edit:
                Intent editIntent = new Intent(this, AdminTeamEditActivity.class);
                app.tmpTeam = team;
                app.getEntityMapper().dataGrabbed();
                app.getEntityMapper().getpMapper().getPerson(team.getLeaderId());
                startActivity(editIntent);
                finish();
                return true;
            case R.id.action_delete:
                Snackbar deleteSnack = Snackbar.make(findViewById(R.id.admin_teams_coordinator), "Are you sure you want to delete team" + team.getName() + "?", Snackbar.LENGTH_LONG);
                deleteSnack.setAction(R.string.confirm, new DeleteListener());
                deleteSnack.show();
                return true;
            default:
                return super.onContextItemSelected(item);
        }
    }

    public void addTeam(View v) {
        Intent createIntent = new Intent(this, AdminTeamCreateActivity.class);
        startActivity(createIntent);
        finish();
    }

    private class DeleteListener implements View.OnClickListener {
        @Override
        public void onClick(View v) {
            parents.remove(team);
            relations.remove(team);
            adapter.notifyDataSetChanged();
            app.getEntityMapper().gettMapper().deleteTeam(team);
        }
    }

    private class GetTeams extends AsyncTask<Void, Void, List<Team>> {
        protected List<Team> doInBackground(Void... voids) {
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                teams = app.entityMapper.teams;
                app.getEntityMapper().dataGrabbed();
            }
            return teams;
        }

        protected void onPostExecute(List<Team> teams) {
            for (Team t : teams) {
                app.getEntityMapper().getpMapper().getPersonsByTeam(t);
                new GetMembersTeam().execute();
            }
        }
    }

    private class GetMembersTeam extends AsyncTask<Void, Void, List<Person>> {
        protected List<Person> doInBackground(Void... voids) {
            List<Person> persons = new LinkedList<>();
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                persons = app.entityMapper.persons;
                app.getEntityMapper().dataGrabbed();
            }
            return persons;
        }

        protected void onPostExecute(List<Person> persons) {
            List<String> membersOfThisTeam= new LinkedList<>();
            List<String> idsOfThisTeam = new LinkedList<>();
            for (Person p:persons){
                membersOfThisTeam.add("Member: "+p.toString());
                idsOfThisTeam.add(""+p.getId());
            }
            memberList.add(membersOfThisTeam);
            idList.add(idsOfThisTeam);
            System.out.println(idList);
            if (memberList.size() == teams.size()) {
                setMemberlistInRightOrder(0);
            }
        }
    }

    private void setMemberlistInRightOrder(int currentPlace) {
        // Because we get the teamlist not in the right order from the database, this recursive method makes sure that
        // memberlist corresponds to teams.
        if (currentPlace == teams.size()) {
            System.out.println(":) "+memberList);
            displayData(teams);
        }
        else {
            Team t = teams.get(currentPlace);
            if (!idList.get(currentPlace + number).contains("" + t.getLeaderId())) {
                number++;
                System.out.println("fail "+idList);
                setMemberlistInRightOrder(currentPlace);
            } else {
                Collections.swap(memberList, currentPlace, currentPlace + number);
                Collections.swap(idList, currentPlace, currentPlace + number);
                number = 0;
                System.out.println("correct "+idList);
                setMemberlistInRightOrder(currentPlace + 1);
            }
        }
    }


        private class NavListener extends AdminNavigationListener {
            public NavListener(Context context) {
                super(context);
            }

            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                super.onNavigationItemSelected(item);
                //finish();
                startActivity(super.resultIntent);
                drawer.closeDrawer(GravityCompat.START);
                return true;
            }
        }
}
