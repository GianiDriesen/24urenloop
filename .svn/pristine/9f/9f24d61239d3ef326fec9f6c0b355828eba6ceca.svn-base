package be.industria.industria24u.industria24u;

import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.support.annotation.NonNull;
import android.support.design.widget.NavigationView;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.Toast;

import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;

import be.industria.industria24u.industria24u.navigation.AdminNavigationListener;
import entity.Person;
import entity.Team;

@SuppressWarnings("UnusedParameters")
public class RunnerTeamsAddMemberActivity extends AppCompatActivity {
    private SingletonApplication app;
    private Toolbar toolbar;
    private DrawerLayout drawer;
    private ActionBarDrawerToggle toggle;
    private NavigationView navigationView;
    private EditText memberFirstName;
    private EditText memberLastName;
    private EditText memberEmail;
    private Team team;
    private Intent intent;
    private int year = Calendar.getInstance().get(Calendar.YEAR);

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.runner_my_team_addmember_container);
        app = (SingletonApplication) this.getApplication();
        setupViews();
        intent = new Intent(this, RunnerTeamsActivity.class);
        app.getEntityMapper().gettMapper().getTeamByPersonAndYear(app.getUser(),year);
        new GetTeam().execute();
    }

    private void setupViews() {
        toolbar = (Toolbar) findViewById(R.id.runner_my_team_addmember_toolbar);
        if (getSupportActionBar() == null) {
            setSupportActionBar(toolbar);
        }

        drawer = (DrawerLayout) findViewById(R.id.runner_my_team_addmember_container);
        toggle = new ActionBarDrawerToggle(this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        navigationView = (NavigationView) findViewById(R.id.runner_my_team_addmember_nav);
        navigationView.setNavigationItemSelectedListener(new NavListener(this.getApplicationContext()));

        memberFirstName = (EditText) findViewById(R.id.memberFirstName);
        memberLastName = (EditText) findViewById(R.id.memberLastName);
        memberEmail = (EditText) findViewById(R.id.memberEMail);
    }


    public void addMemberToTeam(View v) {
        if (memberEmail.getText().toString() == "" || memberEmail.getText().toString().length() > 1) {
            app.getEntityMapper().getpMapper().getPersonByEmail(memberEmail.getText().toString());
            new GetMember().execute();
        }
        else {
            app.getEntityMapper().getpMapper().getPersonsByName(memberFirstName.getText().toString(), memberLastName.getText().toString());
            new GetMembers().execute();
        }

    }


    private class NavListener extends AdminNavigationListener {
        public NavListener(Context context) {
            super(context);
        }

        @Override
        public boolean onNavigationItemSelected(@NonNull MenuItem item) {
            super.onNavigationItemSelected(item);
            //finish();
            startActivity(super.resultIntent);
            drawer.closeDrawer(GravityCompat.START);
            return true;
        }
    }

    private class GetMembers extends AsyncTask<Void, Void, List<Person>> {
        protected List<Person> doInBackground(Void... voids) {
            List<Person> persons = new LinkedList<>();
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                persons = app.entityMapper.persons;
                app.getEntityMapper().dataGrabbed();
            }

            return persons;
        }

        protected void onPostExecute(List<Person> persons) {
            if (persons.size()==1) {
                Person person = persons.get(0);
                app.getEntityMapper().getTeamHasPersonMapper().createTeamHasPerson(person,team);
                Toast.makeText(app.getApplicationContext(), "Person added to the Team! ", Toast.LENGTH_SHORT).show();
                startActivity(intent);
                finish();
            }
            else if (persons.size()==0) {
                Toast.makeText(app.getApplicationContext(), "Person with that name doesn't exist.", Toast.LENGTH_SHORT).show();
            }
            else {
                Toast.makeText(app.getApplicationContext(), "There are multiple persons with this name. Try to fill in the runners e-mail adress", Toast.LENGTH_SHORT).show();

            }
        }
    }

    private class GetMember extends AsyncTask<Void, Void, Person> {
        protected Person doInBackground(Void... voids) {
            Person person = new Person();
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                person = app.entityMapper.person;
                app.getEntityMapper().dataGrabbed();
            }

            return person;
        }

        protected void onPostExecute(Person person) {
            if (person != null) {
                app.getEntityMapper().getTeamHasPersonMapper().createTeamHasPerson(person,team);
                Toast.makeText(app.getApplicationContext(), "Person added to the team! ", Toast.LENGTH_SHORT).show();
                startActivity(intent);
                finish();
            }
            else {
                Toast.makeText(app.getApplicationContext(), "Person with that e-mail doesn't exist.", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private class GetTeam extends AsyncTask<Void, Void, Team> {
        protected Team doInBackground(Void... voids) {
            while (!app.getEntityMapper().dataReady()) {
                if (isCancelled()) break;
            }
            if (app.getEntityMapper().dataReady()) {
                team = app.getEntityMapper().team;
                app.getEntityMapper().dataGrabbed();
            }
            return team;
        }

        protected void onPostExecute(Team team) {
        }

    }
}
